import React, { useState, useContext, useRef, useEffect } from 'react';
import { Card, CardBody, CardHeader, Col, Nav, NavItem, NavLink, Row, TabContent, Table, TabPane } from 'reactstrap';
import axios from 'axios';
import config from '../../../config/env';
import { IsMobileContext } from '../../../layouts/DashboardLayout';
import { Doughnut,defaults } from 'react-chartjs-2';
import querystring from 'querystring';
import classnames from 'classnames';

const SponsorList = function(props) {
  return (
    <Table>
      <thead>
      <tr>
        <th><span className="responsive"></span></th>
        <th><span className="responsive">Name</span></th>
        <th><span className="responsive">Email</span></th>
        <th><span className="responsive">Sponsor Type</span></th>
      </tr>
      </thead>
      <tbody>
      {props.sponsorList.map(sponsor => {
        return (
          <tr key={sponsor.email}>
            <td className="d-flex justify-content-center align-content-center"><span className="responsive"><input type="checkbox" onClick={e => e.target.checked ? props.addSponsor(sponsor.email) : props.deleteSponsor(sponsor.email)}/></span></td>
            <td><span className="responsive">{sponsor.name}</span></td>
            <td><span className="responsive">{sponsor.email}</span></td>
            <td><span className="responsive">{sponsor.role}</span></td>
          </tr>
        );
      })}
      </tbody>
    </Table>
  );


};

const TestLinkList = function(props){
  return (
    <Table>
      <thead>
      <tr>
        <th><span className="responsive"></span></th>
        <th><span className="responsive">TestLink</span></th>
        <th><span className="responsive">Generated By</span></th>
      </tr>
      </thead>
      <tbody>
      {props.testList.map(test => {
        return (
          <tr key={test.uuid}>
            <td><span className="responsive"><input type="checkbox" onClick={e => e.target.checked ? props.addLink(test.uuid) : props.deletelink(test.uuid)} /></span></td>
            <td><span className="responsive">{`${config.url}/credit/${test.uuid}/test`}</span></td>
            <td><span className="responsive">{test.sponsor}</span></td>
          </tr>
        );
      })}
      </tbody>
    </Table>
  );
};

const DoughnutChart = function(props) {
  let data = [0, 0, 0, 0, 0];
  if (props.data) {
    data[0] = props.data.Adventurer;
    data[1] = props.data.Nester;
    data[2] = props.data.Manager;
    data[3] = props.data.Influencer;
    data[4] = props.data.Hunter;
  }
  const chartColors = {
    red: 'rgb(233, 30, 99)',
    danger: 'rgb(233, 30, 99)',
    dangerTransparent: 'rgba(233, 30, 99, .8)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 180, 0)',
    green: 'rgb(34, 182, 110)',
    blue: 'rgb(68, 159, 238)',
    primary: 'rgb(68, 159, 238)',
    primaryTransparent: 'rgba(68, 159, 238, .8)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)',

    primaryShade1: 'rgb(68, 159, 238)',
    primaryShade2: 'rgb(23, 139, 234)',
    primaryShade3: 'rgb(14, 117, 202)',
    primaryShade4: 'rgb(9, 85, 148)',
    primaryShade5: 'rgb(12, 70, 117)',
  };
  const donutData = {
    labels: ['Adventurer', 'Nester', 'Manager', 'Influencer', 'Hunter'],
    datasets: [
      {
        data: data,
        backgroundColor: [
          chartColors.primaryShade1,
          chartColors.primaryShade2,
          chartColors.primaryShade3,
          chartColors.primaryShade4,
          chartColors.primaryShade5,
        ],
        hoverBackgroundColor: [
          chartColors.primaryShade4,
          chartColors.primaryShade4,
          chartColors.primaryShade4,
          chartColors.primaryShade4,
          chartColors.primaryShade4,
        ],
      },
    ],
  };
  return <Doughnut
    data={donutData}
    width={908}
    height={768}
    animation={false}
    legend={{ "display": true, "position":"bottom" }}
  />

};


const SponsorAnalytics = function(props){
  const [sponsorList, setSponsorList] = useState([]);
  const isMobileView = useContext(IsMobileContext);
  const [selectedSponsorList, setSelectedSponsorList] = useState([]);
  const addSponsorSelection = (sponsorEmail)=> {
    let sponsors = new Set(selectedSponsorList);
    sponsors.add(sponsorEmail);
    setSelectedSponsorList(Array.from(sponsors));
  };
  const deleteSponsorSelection = (sponsorEmail)=> {
    let sponsors = new Set(selectedSponsorList);
    sponsors.delete(sponsorEmail);
    setSelectedSponsorList(Array.from(sponsors));
  };
  useEffect(() => {
    const token = localStorage.getItem('Token');
    axios.get(`${config.url}/api/v1/sponsor/child_sponsors`, {
      headers: {
        Authorization: 'Bearer ' + token
      },
    }).then(res => {
      setSponsorList(res.data.sponsors);
    }).catch(error => {
      console.log(error);
    });
  }, []);
  useEffect(() => {
    const token = localStorage.getItem('Token');
    axios.get(`${config.url}/api/v1/sponsor/analytics/sponsor/profile-breakup?${querystring.stringify({sponsor_emails:selectedSponsorList})}`, { headers: { Authorization: `Bearer ${token}` }})
      .then(res => {
        props.setDoughnutData(res.data);
      })
      .catch(err => {
        console.log(err);
      });
    axios.get(`${config.url}/api/v1/sponsor/analytics/sponsor/conversion-rate?${querystring.stringify({sponsor_emails:selectedSponsorList})}`, { headers: { Authorization: `Bearer ${token}` }})
      .then(res => {
        props.setConversionRate(res.data.conversion);
      })
      .catch(err => {
        console.log(err);
      });

  }, [selectedSponsorList]);
  return <SponsorList sponsorList={sponsorList} isMobileView={isMobileView} addSponsor={addSponsorSelection} deleteSponsor={deleteSponsorSelection}/>

};
const TestLinkAnalytics = function(props){
  const [testLinkList, setTestLinkList] = useState([]);
  const isMobileView = useContext(IsMobileContext);
  const [selectedTestLink, setSelectedTestLink] = useState([]);
  const addTestLinkSelection = (uuid)=> {
    let links = new Set(selectedTestLink);
    links.add(uuid);
    setSelectedTestLink(Array.from(links));
  };
  const deleteTestLinkSelection  = (uuid)=> {
    let links = new Set(selectedTestLink);
    links.delete(uuid);
    setSelectedTestLink(Array.from(links));
  };
  useEffect(() => {
    const token = localStorage.getItem('Token');
    axios.get(`${config.url}/api/v1/sponsor/child-test-links`, {
      headers: {
        Authorization: 'Bearer ' + token
      },
    }).then(res => {
      setTestLinkList(res.data.links);
    }).catch(error => {
      console.log(error);
    });
  }, []);
  useEffect(() => {
    const token = localStorage.getItem('Token');
    axios.get(`${config.url}/api/v1/sponsor/analytics/test-link/profile-breakup?${querystring.stringify({test_uuids:selectedTestLink})}`, { headers: { Authorization: `Bearer ${token}` }})
      .then(res => {
        props.setDoughnutData(res.data);
      })
      .catch(err => {
        console.log(err);
      });
    axios.get(`${config.url}/api/v1/sponsor/analytics/test-link/conversion-rate?${querystring.stringify({test_uuids:selectedTestLink})}`, { headers: { Authorization: `Bearer ${token}` }})
      .then(res => {
        props.setConversionRate(res.data.conversion);
      })
      .catch(err => {
        console.log(err);
      });

  }, [selectedTestLink]);
  return <TestLinkList testList={testLinkList} isMobileView={isMobileView} addLink={addTestLinkSelection} deleteLink={deleteTestLinkSelection}/>

};

const ConversionRateCard = (props) =>{
  let conversion_rate = props.conversion_rate;
  return <h1>{conversion_rate*100} %</h1>
};

const ManagementDashboard = function(props) {

  const [activeTab, setActiveTab] = useState('1');

  const toggle = tab => {
    if(activeTab !== tab) setActiveTab(tab);
  }
  const [doughnutData, setDoughnutData] = useState({});
  const [conversionRate, setConversionRate] = useState(0);

  return <div>
    <Row>
      <Col xs={12}>
        <Card>
          <CardHeader>
            <Row>
              <Col xs={12} sm={6} md={6}>
                <p className="responsive" style={{
                  fontSize: '150%',
                }}>
                  Analytics
                </p>
              </Col>
            </Row>

          </CardHeader>

          <CardBody>
            <Row>
              <Col lg={8}>
                <Nav tabs>
                  <NavItem>
                  <NavLink
                    className={classnames({ active: activeTab === '1' })}
                    onClick={() => { toggle('1'); }}
                  >
                    Sponsor
                  </NavLink>
                  </NavItem>
                  <NavItem>
                    <NavLink
                      className={classnames({ active: activeTab === '2' })}
                      onClick={() => { toggle('2'); }}
                    >
                      Test Link
                    </NavLink>
                  </NavItem>
                  <TabContent activeTab={activeTab} className={'w-100 h-100'}>
                    <TabPane tabId="1">
                      <SponsorAnalytics setDoughnutData={setDoughnutData} setConversionRate={setConversionRate}/>
                    </TabPane>
                    <TabPane tabId="2">
                      <TestLinkAnalytics setDoughnutData={setDoughnutData} setConversionRate={setConversionRate}/>
                    </TabPane>
                  </TabContent>
                </Nav>

              </Col>
              <Col lg={4}>
                <Row>
                <Card>
                  <CardHeader><span className="responsive">Profile Breakdown</span></CardHeader>
                  <CardBody>
                    <DoughnutChart data={doughnutData}/>
                  </CardBody>
                </Card>
                </Row>
                <Row>
                <Card style={{width:'100%'}}>
                  <CardHeader className={"text-left"}><span className="responsive">Conversion Rate</span></CardHeader>
                  <CardBody className={"text-center"}>
                    <ConversionRateCard conversion_rate={conversionRate}/>
                  </CardBody>
                </Card>
                </Row>
              </Col>
            </Row>
          </CardBody>
        </Card>
      </Col>
    </Row>

  </div>;
};

export default ManagementDashboard;
